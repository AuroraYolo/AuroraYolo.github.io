<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://codingheping.github.io</id>
    <title>codingheping</title>
    <updated>2020-11-11T02:31:57.027Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://codingheping.github.io"/>
    <link rel="self" href="https://codingheping.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://codingheping.github.io/images/avatar.png</logo>
    <icon>https://codingheping.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, codingheping</rights>
    <entry>
        <title type="html"><![CDATA[锁]]></title>
        <id>https://codingheping.github.io/post/suo/</id>
        <link href="https://codingheping.github.io/post/suo/">
        </link>
        <updated>2020-11-10T09:15:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="全局锁">全局锁</h2>
<p>全局锁是对整个数据库实例枷锁.MySQL提供了一个加全局读锁的方法,命令是Flush tables with read lock(FTWRL).当你需要让整个库处于只读状态的时候,可以使用这个命令,<br>
之后其他线程的以下语句会被阻塞:数据更新语句(数据的增删改)、数据定义语句(建表、修改表结构等)和更新类事务的提交语句.</p>
<p>全局锁的典型使用场景是,做全库逻辑备份.</p>
<h2 id="表级锁">表级锁</h2>
<p>MySQL里面表级别的锁有两种:一种是表锁,一种是元数据锁.(meta data lock)<br>
表锁的语法是lock tables ...read/write.可以用unlock tables主动释放锁.举个例子,如果某个线程A中执行lock tables t1 read,t2 write;这个语句,则其他线程写t1、读写t2的语句<br>
都会被阻塞.同时,线程A在执行unlock tables之前,也只能执行读t1、读写t2的操作.练写t1都不允许,自然也不能访问其他表.</p>
<p>另一类表级的锁是MDL(metadata lock).MDL不需要显式使用,在访问一个表的时候会被自动加上.MDL的作用是,保证读写的正确性.<br>
读锁之间不互斥,可以有多个线程同时对一张表增删改查.<br>
读写锁之间、写锁之间是互斥的,用来保证变更表结构操作的安全性.因此,如果有两个线程要同时给一个表加字段,其中一个要等另一个执行完才能执行.</p>
<h2 id="行锁">行锁</h2>
<p>行锁是针对数据表中行记录的锁.比如事务A更新了一行,而这时候事务B也要更新同一行,则必须等事务A的操作完成后才能进行更新.</p>
<p>在InnoDB事务中,行锁是在需要的时候才加上的,但并不是不需要了就立刻释放,而是要等到事务结束时才释放.这个就是两阶段锁协议。<br>
如果事务中需要锁多个行,要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放.</p>
<h2 id="死锁和死锁检测">死锁和死锁检测</h2>
<p>当并发系统中不同线程出现循环资源依赖,涉及的线程都在等待别的线程释放资源时,就会导致这几个线程都进入无线等待的状态,称为死锁.<br>
用数据库中的行锁举个例子:<br>
<img src="https://static001.geekbang.org/resource/image/4d/52/4d0eeec7b136371b79248a0aed005a52.jpg" alt="avatar" loading="lazy"><br>
这时候,事务A在等待事务B释放id=2的行锁,而事务B在等待事务A释放id=1的行锁.事务A和事务B在互相等待对方的资源释放,就是进入了死锁状态.<br>
当出现死锁以后,有两种策略:<br>
1.直接进入等待,直到超时.这个超时时间可以通过参数innodb_lock_wait_timeout来设置.<br>
2.发起死锁检测,发现死锁后,主动回滚死锁链条中的某一个事务,让其他事务得已继续执行.将参数innodb_deadlock_detect设置为on,表示开启这个逻辑.</p>
<p>在InnoDB中,innodb_lock_wait_timeout的默认值是50s,意味着如果采用第一个策略,当出现死锁以后,第一个被锁住的线程要过50s才会超时退出,然后其他线程才有可能继续<br>
执行.这个等待时间是无法接受的.所以一般还是采用主动死锁检测.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[聚簇索引和非聚簇索引]]></title>
        <id>https://codingheping.github.io/post/ju-cu-suo-yin-he-fei-ju-cu-suo-yin/</id>
        <link href="https://codingheping.github.io/post/ju-cu-suo-yin-he-fei-ju-cu-suo-yin/">
        </link>
        <updated>2020-11-10T09:14:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="聚簇索引">聚簇索引</h2>
<p>表数据和主键存在一起的，主键索引的叶节点存储行数据(包括主键),<br>
二级索引的叶节点存储行的主键值.使用的是B+树作为索引的存储结构,非叶子节点都是索引关键字，但非叶子节点中的关键字中不存储对应记录的具体内容或内容地址。叶子节点上的数据是主键与具体记录(数据内容)。</p>
<h2 id="非聚簇索引">非聚簇索引</h2>
<p>表数据和索引是分成两部分存储的，主键索引和二级索引存储上没有任何区别。使用的是B+树作为索引的存储结构，所有的节点都是索引，叶子节点存储的是索引+索引对应的记录的数据</p>
<h2 id="聚簇索引的优点">聚簇索引的优点</h2>
<p>1.当你需要取出一定范围内的数据时，用聚簇索引也比用非聚簇索引好。</p>
<p>2.当通过聚簇索引查找目标数据时理论上比非聚簇索引要快，因为非聚簇索引定位到对应主键时还要多一次目标记录寻址,即多一次I/O。</p>
<p>3.使用覆盖索引扫描的查询可以直接使用页节点中的主键值</p>
<h2 id="聚簇索引的缺点">聚簇索引的缺点</h2>
<p>1.插入速度严重依赖于插入顺序，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个自增的ID列为主键。</p>
<p>2.更新主键的代价很高，因为将会导致被更新的行移动。因此，对于InnoDB表，我们一般定义主键为不可更新。</p>
<p>3.二级索引访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据。二级索引的叶节点存储的是主键值，而不是行指针（非聚簇索引存储的是指针或者说是地址），这是为了减少当出现行移动或数据页分裂时二级索引的维护工作，但会让二级索引占用更多的空间。</p>
<p>4.采用聚簇索引插入新值比采用非聚簇索引插入新值的速度要慢很多，因为插入要保证主键不能重复，判断主键不能重复，采用的方式在不同的索引下面会有很大的性能差距，聚簇索引遍历所有的叶子节点，非聚簇索引也判断所有的叶子节点，但是聚簇索引的叶子节点除了带有主键还有记录值，记录的大小往往比主键要大的多。这样就会导致聚簇索引在判定新记录携带的主键是否重复时进行昂贵的I/O代价</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[索引]]></title>
        <id>https://codingheping.github.io/post/suo-yin/</id>
        <link href="https://codingheping.github.io/post/suo-yin/">
        </link>
        <updated>2020-11-10T09:13:38.000Z</updated>
        <content type="html"><![CDATA[<h2 id="索引常见的模型">索引常见的模型</h2>
<p>数据结构:哈希表、有序数组、和搜索树.<br>
哈希表适用于等值查询的场景.(应用场景:存储身份证信息和姓名的表)<br>
有序数组适用于等值查询和范围查询.<br>
二叉搜索树:每个节点左儿子小于父节点,右儿子大于父节点.<br>
InnoDB引擎索引模型是:B+Tree</p>
<h2 id="索引类型">索引类型</h2>
<p>主键索引 非主键索引</p>
<p>主键索引的叶子节点存的是整行的数据(聚簇索引),非主键索引的叶子节点存的的是主键的值(二级索引)</p>
<p>主键索引和普通索引的区别:主键索引只要搜索ID这个B+Tree即可拿到数据.普通索引先搜索索引拿到主键值,再到<br>
主键索引数搜索一次(回表)</p>
<h2 id="为何选择自增主键">为何选择自增主键</h2>
<p>从性能和存储空间方面考量,自增主键往往是更合理的选择.</p>
<p>主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小.</p>
<p>一个数据页满了,安装B+Tree算法,新增加一个数据页,叫做页分裂,会导致性能下架.空间利用率降低大概50%.当相邻<br>
的两个数据页利用率很低的时候会做数据页合并,合并的过程是分裂过程的逆过程.</p>
<pre><code>select * from T where k between 3 and 5;
表结构:
mysql&gt; create table T (
ID int primary key,
k int NOT NULL DEFAULT 0, 
s varchar(16) NOT NULL DEFAULT '',
index k(k))
engine=InnoDB;

insert into T values(100,1, 'aa'),(200,2,'bb'),(300,3,'cc'),(500,5,'ee'),(600,6,'ff'),(700,7,'gg');
![avatar](https://static001.geekbang.org/resource/image/dc/8d/dcda101051f28502bd5c4402b292e38d.png)
SQL查询流程:
1.在k索引树上找到k=3的记录,取得ID=300;
2.再到ID索引数查到ID=300对应的R3;
3.在k索引树上取下一个值k=5,取得ID=500,
4.再回到ID索引数查到ID=500对应的R4;
5.在k索引数去下一个值k=6,不满足条件,循环结束.
</code></pre>
<h2 id="回表">回表</h2>
<p>回到主键索引数搜索的过程,称之为回表.</p>
<h2 id="覆盖索引">覆盖索引</h2>
<p>如果执行的语句是select ID from T where k between 3 and 5,这时只需要查ID的值,ID的值已经在k索引树上,可以直接提供查询结果,<br>
不需要回表.索引k已经'覆盖了'查询需求,称之为覆盖索引</p>
<p><em><strong>覆盖索引可以减少树的搜索次数,显著提升查询性能,所有使用覆盖索引时一个常用的优化手段.</strong></em></p>
<h2 id="最左前缀原则">最左前缀原则</h2>
<p>B+数索引结构,可以利用索引的'最左前缀',来定位记录<br>
比如(name,age)联合索引,只要满足最左前缀,就可以利用索引来加速检索.这个最左前缀可以是联合索引的最左N个字段,也可以是字符串索引的最左M个字符.</p>
<h2 id="索引下推">索引下推</h2>
<p>MySQL5.6以后引入了索引下推优化,在索引遍历过程中,对索引中包含的字段先做判断,直接过滤掉不满足条件的记录,减少回表次数.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[事务隔离]]></title>
        <id>https://codingheping.github.io/post/shi-wu-ge-chi/</id>
        <link href="https://codingheping.github.io/post/shi-wu-ge-chi/">
        </link>
        <updated>2020-11-10T09:12:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="事务">事务</h2>
<p>事务就是保证一组数据库操作,要么全部成功,要么全部失败.MySQL原生的MyISAM引擎不支持事务.<br>
特性:ACID(原子性、一致性、隔离性、持久性)</p>
<h2 id="隔离性与隔离级别">隔离性与隔离级别</h2>
<p>当数据库上有多个事务同时执行的时候,就可能出现脏读(dirty read)、不可重复读(non-repeatable read)、幻读(phantom read)的问题.<br>
SQL标准的事务隔离级别包括:读未提交(read uncommitted)、读提交(read committed)、可重复读(repeatable read)、串行化(serializable)。</p>
<p>读未提交是指,一个事务还没提交时,它做的变更就能被别的事务看到.<br>
读提交是指,一个事务提交之后,它做的变更才会被其他事务看到.<br>
可重复读是指,一个事务执行过程中看到的数据,总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下,未提交变更对其他事务<br>
是也是不可见的.<br>
串行化,顾名思义是对于同一行记录,&quot;写&quot;会加&quot;写锁&quot;,&quot;读&quot;会加&quot;读锁&quot;.当出现读写锁冲突的时候,后访问的事务必须等前一个事务执行完成,才能继续执行.<br>
假设数据表找中T中只有一列,其中一行的值为1,下面是按照时间顺序执行两个事务的行为.<br>
mysql&gt; create table T(c int) engine=InnoDB;<br>
insert into T(c) values(1);<br>
<img src="https://codingheping.github.io/post-images/1604999575410.png" alt="" loading="lazy"></p>
<pre><code>若隔离级别是&quot;读未提交&quot;,则V1的值就是2,这时候事务B虽然还没有提交,但是结果已经被A看到了.因此,V2、V3也都是2.
若隔离级别是&quot;读提交&quot;,则V1是1,V2的值是2.事务B的更新在提交后才能被A看到.所以,V3的值也是2.
若隔离级别是&quot;可重复读&quot;,则V1、V2是1,V3是2.之所以V2还是1,遵循的就是这个要求:事务在执行期间靠到的数据前后必须是一致的.
若隔离界别是&quot;串行化&quot;,则在事务B执行&quot;将1改成2&quot;的时候,会被锁住.直到事务A提交后,事务B才可以继续执行.所以从A的角度看,V1、V2的值是1,
V3的值是2.
在实现上,数据库里面会创建一个视图,访问的时候以视图的逻辑结果为准.在&quot;可重复读&quot;隔离级别下,这个视图是在事务启动时创建的,
整个事务存在期间都用这个视图.在&quot;读提交&quot;隔离级别下,这个视图是在每个SQL语句开始执行的时候创建的.这里需要注意的是,&quot;读未提交&quot;隔离级别下
直接返回记录上的最新值,没有视图概念;而&quot;串行化&quot;隔离级别下直接用加锁的方式来避免并行访问.
</code></pre>
<h2 id="事务隔离级别的实现">事务隔离级别的实现</h2>
<p>在MySQL中,实际上每条记录在更新的时候都会同时记录一条回滚操作.记录上的最新值,通过回滚操作.都可以得到前一个状态的值.<br>
假设一个值从1被按顺序改成了2、3、4,在回滚日志里面就会有类似下面的记录.<br>
<img src="https://static001.geekbang.org/resource/image/d9/ee/d9c313809e5ac148fc39feff532f0fee.png" alt="avatar" loading="lazy"><br>
当前值是4,但是在查询这条记录的时候,不同时刻启动的事务会有不同的read-view.如图中看到的,在视图A、B、C里面,这一个记录的值分别<br>
是1、2、4,同一条记录在系统中可以存在多个版本,就是数据库的多版本并发控制(MVCC).对于 read-view A，要得到 1，就必须将当前值依次执行图中的所有回滚操作.<br>
即使现在有另外一个事务正在将4改成5,这个事务跟read-view A、B、C对应的事务是不会冲突的.</p>
<p>回滚日志在不需要的时候会删除,不会一直保存.<br>
尽量不要使用长事务.</p>
<h2 id="事务的启动方式">事务的启动方式</h2>
<p>1.显式启动事务语句,begin 或start transaction.配套的提交语句是commit,回滚是rollback。<br>
2.set autocommit=0,这个命令会将这个线程的自动提交关闭。意味着你如果只执行select语句.这个事务就启动了,而且不会自动提交.这个事务<br>
持续存在直到你主动执行commit或rollback语句,或者断开连接.</p>
<p>建议用显式语句的方式来启动事务.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQL批量更新]]></title>
        <id>https://codingheping.github.io/post/sql-pi-liang-geng-xin/</id>
        <link href="https://codingheping.github.io/post/sql-pi-liang-geng-xin/">
        </link>
        <updated>2020-11-10T09:11:11.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一般的sql更新语句">一般的SQL更新语句:</h2>
<p>UPDATE mytable SET myfield = 'value' WHERE other_field = 'other_value';</p>
<h2 id="如果更新同一字段为同一个值">如果更新同一字段为同一个值</h2>
<p>UPDATE mytable set myfield ='value' WHERE other_field IN('other_values');</p>
<h2 id="批量更新方案">批量更新方案</h2>
<p>CASE WHEN<br>
UPDATE mytable SET<br>
myfield = CASE id<br>
WHEN 1 THEN 'value'<br>
WHEN 2 THEN 'value'<br>
WHEN 3 THEN 'value'<br>
END,<br>
myfield1 = CASE id<br>
WHEN 1 THEN 'value1'<br>
WHEN 2 THEN 'value2'<br>
WHEN 3 THEN 'value3'<br>
END<br>
WHERE id IN (1,2,3)<br>
SQL的意思是更新myfield字段当id为1的时候值为value......,更新myfield1字段当id为1的时候<br>
值为'value1'....</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mysql查询执行流程]]></title>
        <id>https://codingheping.github.io/post/mysql-cha-xun-zhi-xing-liu-cheng/</id>
        <link href="https://codingheping.github.io/post/mysql-cha-xun-zhi-xing-liu-cheng/">
        </link>
        <updated>2020-11-10T09:07:29.000Z</updated>
        <content type="html"><![CDATA[<h2 id="mysql-sql语句执行流程">MySQL SQL语句执行流程</h2>
<figure data-type="image" tabindex="1"><img src="https://codingheping.github.io/post-images/1604999295879.png" alt="" loading="lazy"></figure>
<p>大体来说,MySQL可以分为Server层和存储引擎层两部分.<br>
Server层包括连接器、查询缓存、分析器、优化器、执行器等,涵盖MySQL的大多数核心服务功能,以及<br>
所有的内置函数(如日期,时间,数学和加密函数),所有跨存储引擎的功能都在这一层实现,比如存储过程<br>
触发器、视图等.</p>
<p>存储引擎只负责数据的存储和提取.其架构模式是插件式的,支持InnoDB、MyiSAM、Memory<br>
等多个存储引擎,现在最常用的存储引擎是InnoDB.从MySQL5.5.5版本开始成为了默认引擎.</p>
<h3 id="连接器">连接器.</h3>
<p>第一步,先连接到数据库服务器上,这时候接待你的就是连接器.连接器负责跟客户端建立连接、获取权限、维持和管理连接.<br>
连接命令: mysql -h<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi>p</mi><mo>−</mo><mi>p</mi></mrow><annotation encoding="application/x-tex">ip -p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span>port -u$user -p</p>
<h3 id="查询缓存">查询缓存</h3>
<p>连接建立完成后,就可以执行select语句了.执行逻辑来到第二步:查询缓存.</p>
<p>MySQL拿到一个查询请求后,会先到查询缓存查看,如果命中查询缓存就以key-value的形式返回.<br>
如果没有命中缓存,就进入下一个执行阶段.<br>
不建议开启缓存,MySQL8.0废弃了查询缓存.</p>
<h3 id="分析器">分析器</h3>
<p>没有命中查询缓存,开始执行语句,MySQL对SQL语句做解析.查看SQL语句是否满足MySQL语法,<br>
如果不满足就抛出错误.</p>
<h3 id="优化器">优化器</h3>
<p>经过了分析器,还要经过优化器.优化器是在表里有多个索引时,决定使用哪个索引;或者在一个语句中有多表<br>
关联(join),决定各个表的连接顺序.</p>
<h3 id="执行器">执行器</h3>
<p>开始执行的时候,判断一下对这个表有没有执行查询的权限,如果没有,就会返回没有权限的错误,如果有权限,就打开表<br>
继续执行。打开表的时候,执行器就会根据表的引擎定义,去使用(InnoDB,MyiSAM)引擎提供的接口.然后返回执行的结果.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mysql更新执行流程]]></title>
        <id>https://codingheping.github.io/post/mysql-geng-xin-zhi-xing-liu-cheng/</id>
        <link href="https://codingheping.github.io/post/mysql-geng-xin-zhi-xing-liu-cheng/">
        </link>
        <updated>2020-11-10T09:04:49.000Z</updated>
        <content type="html"><![CDATA[<h2 id="mysql-sql语句执行流程">MySQL SQL语句执行流程</h2>
<figure data-type="image" tabindex="1"><img src="https://codingheping.github.io/post-images/1604999136696.png" alt="" loading="lazy"></figure>
<p>与MySQL查询流程一样,更新流程还涉及两个重要的日志模块,redo log(重做日志)和binlog(归档日志).</p>
<h2 id="redo-log">redo log</h2>
<p>如果每一次的的更新操作都需要写进磁盘,然后磁盘也要找到对应的那条记录,然后再更新,整个IO成本、查找成本很高.MySQL里使用的是<br>
WAL技术,WAL的全称是Write-Ahead Logging.它的关键点是先写日志,再写磁盘.具体来说,当有一条记录需要更新的时候,InnoDB引擎就会先把记录写到redo log里面,<br>
并更新内存.这个时候更新就算完成了.同时,InnoDB引擎会在适当的时候,将这个操作记录更新到磁盘里面,而这个更新往往是在系统比较空闲的时候做.</p>
<p>InnoDB的redo log是固定大小的,比如可以配置为一组4个文件,每个文件的大小是1GB,那么总共可以记录4GB的操作.从头开始写,写到末尾就又回到开头循环写.如图所示:<br>
<img src="https://codingheping.github.io/post-images/1604999149606.png" alt="" loading="lazy"><br>
write pos是当前记录的位置,一边写一边往后移,写到第3号文件末尾后就回到0号文件开头.checkpoint是当前要擦除的位置,也是往后移并且循环的,擦除记录<br>
前要把记录更新到数据文件.<br>
有了redo log,InnoDB就可以保证即使数据库发送异常重启,之前提交的记录都不会丢失,这个能力成为crash-safe.</p>
<h2 id="bin-log">bin log</h2>
<p>redo log是InnoDB引擎特有的日志,而Server层也有自己的日志,称为binlog(归档日志).为什么有两份日志?因为最开始MySQL里并没有InnoDB引擎.<br>
MySQL自带的引擎是MyISAM,但是MyISAM没有crash-safe的能力,binlog日志只能用于归档.而InnoDB是另一个公司以插件形式引入MySQL的,既然只依靠binlog<br>
是没有crash-safe能力的,所以InnoDB使用redo log来实现crash-safe的能力.</p>
<h2 id="redo-log和bin-log的不同点">redo log和bin log的不同点</h2>
<p>1.redo log是InnoDB引擎特有的;bin log是MySQL的Server层实现的,所有引擎可以使用.<br>
2.redo log是物理日志,记录的是&quot;在某个数据页上做了什么修改&quot;;binlog是逻辑日志,记录的是这个语句的原始逻辑.比如&quot;给ID=2这一行的c字段加1&quot;.<br>
3.redo log是循环写的,空间固定会用完;binlog是可以追加写入的.&quot;追加写&quot;是指binlog文件写到一定大小后会切换到下一个.并不会覆盖一起的日志.</p>
<h2 id="innodb引擎执行更新语句时的内部流程">InnoDB引擎执行更新语句时的内部流程</h2>
<p>1.执行器先找到引擎取ID=2这一行.ID是主键,引擎直接用树搜索找到这一行.如果ID=2这一行所在的数据页本来就在内存中,就直接返回给执行器;否则,需要先从磁盘读入内存后再返回.<br>
2.执行器拿到引擎给的行数据,把这个值加上1,比如原来是N,现在是N+1,得到新的一行数据,再调用引擎接口写入这行新数据.<br>
3.引擎将这行数据更新到内存中,同时将这个更新操作记录到redo log里面,此时redo log处于prepare(预提交)状态.然后告知执行器执行完成了,随时可以提交事务.<br>
4.执行器生成这个操作的binlog,并把binlog写入磁盘.<br>
5.执行器调用引擎的提交事务交接口,引擎把刚刚写入的redo log改成提交(commit)状态,更新完成.将 redo log 的写入拆成了两个步骤：prepare和commit,这就是&quot;两阶段提交&quot;</p>
<h2 id="两阶段提交">两阶段提交</h2>
<p>为了让两份日志之间的逻辑一致.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mysql优化]]></title>
        <id>https://codingheping.github.io/post/mysql-you-hua/</id>
        <link href="https://codingheping.github.io/post/mysql-you-hua/">
        </link>
        <updated>2020-11-10T09:03:26.000Z</updated>
        <content type="html"><![CDATA[<h2 id="常见误区">常见误区</h2>
<pre><code>1.通常来说把可为NULL的列改为NOT NULL不会对性能提升有多少帮助,只是如果计划在列上创建索引,就应该将该列设置为NOT NULL。
2.对整数类型指定宽度,比如INT(11)，没有任何卵用。INT使用32位（4个字节）存储空间，那么它的表示范围已经确定，所以INT(1)和INT(20)对于存储和计算是相同的。
3.UNSIGNED表示不允许负值，大致可以使正数的上限提高一倍。比如TINYINT存储范围是-128 ~ 127，而UNSIGNED TINYINT存储的范围却是0 - 255。
  
4.通常来讲，没有太大的必要使用DECIMAL数据类型。即使是在需要存储财务数据时，仍然可以使用BIGINT。比如需要精确到万分之一，那么可以将数据乘以一百万然后使用BIGINT存储。这样可以避免浮点数计算不准确和DECIMAL精确计算代价高的问题。
  
5.TIMESTAMP使用4个字节存储空间，DATETIME使用8个字节存储空间。因而，TIMESTAMP只能表示1970 - 2038年，比DATETIME表示的范围小得多，而且TIMESTAMP的值因时区不同而不同。
  
 6.大多数情况下没有使用枚举类型的必要，其中一个缺点是枚举的字符串列表是固定的，添加和删除字符串（枚举选项）必须使用ALTER TABLE（如果只只是在列表末尾追加元素，不需要重建表）。
  
 7.schema的列不要太多。原因是存储引擎的API工作时需要在服务器层和存储引擎层之间通过行缓冲格式拷贝数据，然后在服务器层将缓冲内容解码成各个列，这个转换过程的代价是非常高的。如果列太多而实际使用的列又很少的话，有可能会导致CPU占用过高。
  
 8.大表ALTER TABLE非常耗时，MySQL执行大部分修改表结果操作的方法是用新的结构创建一个张空表，从旧表中查出所有的数据插入新表，然后再删除旧表。尤其当内存不足而表又很大，而且还有很大索引的情况下，耗时更久。当然有一些奇技淫巧可以解决这个问题，有兴趣可自行查阅。
</code></pre>
<h2 id="总结建议">总结建议</h2>
<pre><code>1.数据库设计和表创建时要考虑性能.
2.sql的编写需要注意优化
3.分区
4.分表
5.分库
</code></pre>
<h2 id="数据库设计和表创建就要考虑性能">数据库设计和表创建就要考虑性能</h2>
<pre><code>1.表字段避免null出现,null值很难查询优化且占用额外的索引空间,推荐默认使用0代替null
2.尽量使用INT而非BIGINT,如果非负加上UNSIGNED,当然能使用TINYINT,SMALLINT,MEDIUM_INT更好.
3.使用枚举或整数代替字符串类型
4.尽量使用TIMESTAMP而非DATETIME
5.单表不要有太多字段
6.VARCHAR的长度只分配真正需要的空间
</code></pre>
<h2 id="索引">索引</h2>
<pre><code>1.根据查询有针对性的创建,考虑在WHERE和ORDER BY命令上涉及的列建立索引,可根据EXPLAIN来查看是否用了索引还是全表扫描.
2.应尽量避免在WHERE子句中对字段进行NULL值判断,否则导致引擎放弃使用索引而进行全表扫描.
3.值分布很稀少的字段不适合建索引,例如&quot;性别&quot;这种只有两三个值的字段.原因:非聚簇索引存储了对主键的引用，如果 select 字段不在非聚簇索引内，就需要跳到主键索引。
- 如果非聚簇索引值重复率高，那么查询时就会大量出现上图中从右边跳到左边的情况，导致整个流程很慢
数据库中聚集索引只有一个，默认主键。其他用户创建的索引都是非聚集索引。
非聚集索引存储了对主键的引用，即通过索引确定叶子节点之后，还需要再次根据主键去查询数据。（所以会查询两次）
如果非聚集索引重复率高（即一个同样的值有多个主键），那么首先你会从索引中取一半主键值，然后根据主键值再去查询数据，增加了IO，所以特别耗时。
4.字符字段只建前缀索引.
5.字符字段最好不要做主键.
6.不用外键,由程序保证约束.
7.尽量不要用UNIQUE,由程序保证约束.
</code></pre>
<h2 id="sql编写优化">sql编写优化.</h2>
<pre><code>1.使用limit对查询结果的记录进行限定.
2.避免select(*),将需要查找的字段列出来.
3.使用连接(join)来代替子查询
4.拆分大的delete或insert语句
5.可通过开启慢查询日志找出慢的SQL
6.OR改写成IN;OR的效率时N级别,IN的效率时log(n)级别,in的个数建议控制在200以内
7.避免使用%xxx查询.
8.使用同类型比较.123和123比
9.尽量避免在WHERE子句中使用!=或&lt;&gt;操作符,否则引擎放弃索引使用全表扫描
10.不做列运算：SELECT id WHERE age + 1 = 10，任何对列的操作都将导致表扫描，它包括数据库教程函数、计算表达式等等，查询时要尽可能将操作移至等号右边；
11.对于联系数值,使用BETWEEN不要IN.SELECT id FROM t WHERE num BETWEEN 1 AND 5
12.列表数据不要拿全表，要使用LIMIT来分页，每页数量也不要太大
13.sql语句尽可能简单：一条sql只能在一个cpu运算；大语句拆小语句，减少锁时间；一条大sql可以堵死整个库；
</code></pre>
<h2 id="引擎">引擎</h2>
<pre><code>MyISAM
MyISAM引擎是MySQL 5.1及之前版本的默认引擎，它的特点是：
1.不支持行锁，读取时对需要读到的所有表加锁，写入时则对表加排它锁
2.不支持事务
3.不支持外键
4.不支持崩溃后的安全恢复
5.在表有读取查询的同时，支持往表中插入新纪录
6.支持BLOB和TEXT的前500个字符索引，支持全文索引
7.支持延迟更新索引，极大提升写入性能
8.对于不会进行修改的表，支持压缩表，极大减少磁盘空间占用
</code></pre>
<pre><code> InnoDB
 InnoDB在MySQL 5.5后成为默认索引，它的特点是：
 1.支持行锁，采用MVCC来支持高并发
 2.支持事务
 3.支持外键
 4.支持崩溃后的安全恢复
 5.不支持全文索引总体来讲，MyISAM适合SELECT密集型的表，而InnoDB适合INSERT和UPDATE密集型的表
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JOIN]]></title>
        <id>https://codingheping.github.io/post/join/</id>
        <link href="https://codingheping.github.io/post/join/">
        </link>
        <updated>2020-11-10T08:58:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="0-索引">0 索引</h1>
<pre><code>JOIN语句的执行顺序
INNER/LEFT/RIGHT/FULL JOIN的区别
ON和WHERE的区别
</code></pre>
<h1 id="1-概述">1 概述</h1>
<pre><code>一个完整的SQL语句中会被拆分成多个子句，子句的执行过程中会产生虚拟表(vt)，但是结果只返回最后一张虚拟表。从这个思路出发，我们试着理解一下JOIN查询的执行过程并解答一些常见的问题。
如果之前对不同JOIN的执行结果没有概念，可以结合这篇文章往下看
</code></pre>
<h1 id="2-join的执行顺序">2 JOIN的执行顺序</h1>
<pre><code>以下是JOIN查询的通用结构

SELECT &lt;row_list&gt; 
  FROM &lt;left_table&gt; 
    &lt;inner|left|right&gt; JOIN &lt;right_table&gt; 
      ON &lt;join condition&gt; 
        WHERE &lt;where_condition&gt;
它的执行顺序如下(SQL语句里第一个被执行的总是FROM子句)：

FROM:对左右两张表执行笛卡尔积，产生第一张表vt1。行数为n*m（n为左表的行数，m为右表的行数
ON:根据ON的条件逐行筛选vt1，将结果插入vt2中
JOIN:添加外部行，如果指定了LEFT JOIN(LEFT OUTER JOIN)，则先遍历一遍左表的每一行，其中不在vt2的行会被插入到vt2，该行的剩余字段将被填充为NULL，形成vt3；如果指定了RIGHT JOIN也是同理。但如果指定的是INNER JOIN，则不会添加外部行，上述插入过程被忽略，vt2=vt3（所以INNER JOIN的过滤条件放在ON或WHERE里 执行结果是没有区别的，下文会细说）

WHERE:对vt3进行条件过滤，满足条件的行被输出到vt4
SELECT:取出vt4的指定字段到vt5
下面用一个例子介绍一下上述联表的过程（这个例子不是个好的实践，只是为了说明join语法）
</code></pre>
<h1 id="3-举例">3 举例</h1>
<pre><code>创建一个用户信息表：

CREATE TABLE `user_info` (
  `userid` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  UNIQUE `userid` (`userid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
再创建一个用户余额表：

CREATE TABLE `user_account` (
  `userid` int(11) NOT NULL,
  `money` bigint(20) NOT NULL,
 UNIQUE `userid` (`userid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
随便导入一些数据：

select * from user_info;
+--------+------+
| userid | name |
+--------+------+
|   1001 | x    |
|   1002 | y    |
|   1003 | z    |
|   1004 | a    |
|   1005 | b    |
|   1006 | c    |
|   1007 | d    |
|   1008 | e    |
+--------+------+
8 rows in set (0.00 sec)

select * from user_account;
+--------+-------+
| userid | money |
+--------+-------+
|   1001 |    22 |
|   1002 |    30 |
|   1003 |     8 |
|   1009 |    11 |
+--------+-------+
4 rows in set (0.00 sec)
一共8个用户有用户名，4个用户的账户有余额。
取出userid为1003的用户姓名和余额，SQL如下：

SELECT i.name, a.money 
  FROM user_info as i 
    LEFT JOIN user_account as a 
      ON i.userid = a.userid 
        WHERE a.userid = 1003;
第一步：执行FROM子句对两张表进行笛卡尔积操作
笛卡尔积操作后会返回两张表中所有行的组合，左表user_info有8行，右表user_account有4行，生成的虚拟表vt1就是8*4=32行：

SELECT * FROM user_info as i LEFT JOIN user_account as a ON 1;
+--------+------+--------+-------+
| userid | name | userid | money |
+--------+------+--------+-------+
|   1001 | x    |   1001 |    22 |
|   1002 | y    |   1001 |    22 |
|   1003 | z    |   1001 |    22 |
|   1004 | a    |   1001 |    22 |
|   1005 | b    |   1001 |    22 |
|   1006 | c    |   1001 |    22 |
|   1007 | d    |   1001 |    22 |
|   1008 | e    |   1001 |    22 |
|   1001 | x    |   1002 |    30 |
|   1002 | y    |   1002 |    30 |
|   1003 | z    |   1002 |    30 |
|   1004 | a    |   1002 |    30 |
|   1005 | b    |   1002 |    30 |
|   1006 | c    |   1002 |    30 |
|   1007 | d    |   1002 |    30 |
|   1008 | e    |   1002 |    30 |
|   1001 | x    |   1003 |     8 |
|   1002 | y    |   1003 |     8 |
|   1003 | z    |   1003 |     8 |
|   1004 | a    |   1003 |     8 |
|   1005 | b    |   1003 |     8 |
|   1006 | c    |   1003 |     8 |
|   1007 | d    |   1003 |     8 |
|   1008 | e    |   1003 |     8 |
|   1001 | x    |   1009 |    11 |
|   1002 | y    |   1009 |    11 |
|   1003 | z    |   1009 |    11 |
|   1004 | a    |   1009 |    11 |
|   1005 | b    |   1009 |    11 |
|   1006 | c    |   1009 |    11 |
|   1007 | d    |   1009 |    11 |
|   1008 | e    |   1009 |    11 |
+--------+------+--------+-------+
32 rows in set (0.00 sec)
第二步：执行ON子句过滤掉不满足条件的行
ON i.userid = a.userid 过滤之后vt2如下：

+--------+------+--------+-------+
| userid | name | userid | money |
+--------+------+--------+-------+
|   1001 | x    |   1001 |    22 |
|   1002 | y    |   1002 |    30 |
|   1003 | z    |   1003 |     8 |
+--------+------+--------+-------+
第三步：JOIN 添加外部行
LEFT JOIN会将左表未出现在vt2的行插入进vt2，每一行的剩余字段将被填充为NULL，RIGHT JOIN同理
本例中用的是LEFT JOIN，所以会将左表user_info剩下的行都添上 生成表vt3：

+--------+------+--------+-------+
| userid | name | userid | money |
+--------+------+--------+-------+
|   1001 | x    |   1001 |    22 |
|   1002 | y    |   1002 |    30 |
|   1003 | z    |   1003 |     8 |
|   1004 | a    |   NULL |  NULL |
|   1005 | b    |   NULL |  NULL |
|   1006 | c    |   NULL |  NULL |
|   1007 | d    |   NULL |  NULL |
|   1008 | e    |   NULL |  NULL |
+--------+------+--------+-------+
第四步：WHERE条件过滤
WHERE a.userid = 1003 生成表vt4：

+--------+------+--------+-------+
| userid | name | userid | money |
+--------+------+--------+-------+
|   1003 | z    |   1003 |     8 |
+--------+------+--------+-------+
第五步：SELECT
SELECT i.name, a.money 生成vt5：

+------+-------+
| name | money |
+------+-------+
| z    |     8 |
+------+-------+
虚拟表vt5作为最终结果返回给客户端

介绍完联表的过程之后，我们看看常用JOIN的区别

4 INNER/LEFT/RIGHT/FULL JOIN的区别
INNER JOIN...ON...: 返回 左右表互相匹配的所有行（因为只执行上文的第二步ON过滤，不执行第三步 添加外部行）
LEFT JOIN...ON...: 返回左表的所有行，若某些行在右表里没有相对应的匹配行，则将右表的列在新表中置为NULL
RIGHT JOIN...ON...: 返回右表的所有行，若某些行在左表里没有相对应的匹配行，则将左表的列在新表中置为NULL
INNER JOIN
拿上文的第三步添加外部行来举例，若LEFT JOIN替换成INNER JOIN，则会跳过这一步，生成的表vt3与vt2一模一样：

+--------+------+--------+-------+
| userid | name | userid | money |
+--------+------+--------+-------+
|   1001 | x    |   1001 |    22 |
|   1002 | y    |   1002 |    30 |
|   1003 | z    |   1003 |     8 |
+--------+------+--------+-------+
RIGHT JOIN
若LEFT JOIN替换成RIGHT JOIN，则生成的表vt3如下：

+--------+------+--------+-------+
| userid | name | userid | money |
+--------+------+--------+-------+
|   1001 | x    |   1001 |    22 |
|   1002 | y    |   1002 |    30 |
|   1003 | z    |   1003 |     8 |
|   NULL | NULL |   1009 |    11 |
+--------+------+--------+-------+
因为user_account（右表）里存在userid=1009这一行，而user_info（左表）里却找不到这一行的记录，所以会在第三步插入以下一行：

| NULL | NULL | 1009 | 11 |
FULL JOIN
上文引用的文章中提到了标准SQL定义的FULL JOIN，这在mysql里是不支持的，不过我们可以通过LEFT JOIN + UNION + RIGHT JOIN 来实现FULL JOIN：

SELECT * 
  FROM user_info as i 
    RIGHT JOIN user_account as a 
      ON a.userid=i.userid
union 
SELECT * 
  FROM user_info as i 
    LEFT JOIN user_account as a 
      ON a.userid=i.userid;
他会返回如下结果：

+--------+------+--------+-------+
| userid | name | userid | money |
+--------+------+--------+-------+
|   1001 | x    |   1001 |    22 |
|   1002 | y    |   1002 |    30 |
|   1003 | z    |   1003 |     8 |
|   NULL | NULL |   1009 |    11 |
|   1004 | a    |   NULL |  NULL |
|   1005 | b    |   NULL |  NULL |
|   1006 | c    |   NULL |  NULL |
|   1007 | d    |   NULL |  NULL |
|   1008 | e    |   NULL |  NULL |
+--------+------+--------+-------+
ps：其实我们从语义上就能看出LEFT JOIN和RIGHT JOIN没什么差别，两者的结果差异取决于左右表的放置顺序，以下内容摘自mysql官方文档：

RIGHT JOIN works analogously to LEFT JOIN. To keep code portable across databases, it is recommended that you use LEFT JOIN instead of RIGHT JOIN.
所以当你纠结使用LEFT JOIN还是RIGHT JOIN时，尽可能只使用LEFT JOIN吧

5 ON和WHERE的区别
上文把JOIN的执行顺序了解清楚之后，ON和WHERE的区别也就很好理解了。
举例说明:

SELECT * 
  FROM user_info as i
    LEFT JOIN user_account as a
      ON i.userid = a.userid and i.userid = 1003;
SELECT * 
  FROM user_info as i
    LEFT JOIN user_account as a
      ON i.userid = a.userid where i.userid = 1003;
第一种情况LEFT JOIN在执行完第二步ON子句后，筛选出满足i.userid = a.userid and i.userid = 1003的行，生成表vt2，然后执行第三步JOIN子句，将外部行添加进虚拟表生成vt3即最终结果：

vt2:
+--------+------+--------+-------+
| userid | name | userid | money |
+--------+------+--------+-------+
|   1003 | z    |   1003 |     8 |
+--------+------+--------+-------+
vt3:
+--------+------+--------+-------+
| userid | name | userid | money |
+--------+------+--------+-------+
|   1001 | x    |   NULL |  NULL |
|   1002 | y    |   NULL |  NULL |
|   1003 | z    |   1003 |     8 |
|   1004 | a    |   NULL |  NULL |
|   1005 | b    |   NULL |  NULL |
|   1006 | c    |   NULL |  NULL |
|   1007 | d    |   NULL |  NULL |
|   1008 | e    |   NULL |  NULL |
+--------+------+--------+-------+
而第二种情况LEFT JOIN在执行完第二步ON子句后，筛选出满足i.userid = a.userid的行，生成表vt2；再执行第三步JOIN子句添加外部行生成表vt3；然后执行第四步WHERE子句，再对vt3表进行过滤生成vt4，得的最终结果：

vt2:
+--------+------+--------+-------+
| userid | name | userid | money |
+--------+------+--------+-------+
|   1001 | x    |   1001 |    22 |
|   1002 | y    |   1002 |    30 |
|   1003 | z    |   1003 |     8 |
+--------+------+--------+-------+
vt3:
+--------+------+--------+-------+
| userid | name | userid | money |
+--------+------+--------+-------+
|   1001 | x    |   1001 |    22 |
|   1002 | y    |   1002 |    30 |
|   1003 | z    |   1003 |     8 |
|   1004 | a    |   NULL |  NULL |
|   1005 | b    |   NULL |  NULL |
|   1006 | c    |   NULL |  NULL |
|   1007 | d    |   NULL |  NULL |
|   1008 | e    |   NULL |  NULL |
+--------+------+--------+-------+
vt4:
+--------+------+--------+-------+
| userid | name | userid | money |
+--------+------+--------+-------+
|   1003 | z    |   1003 |     8 |
+--------+------+--------+-------+
如果将上例的LEFT JOIN替换成INNER JOIN，不论将条件过滤放到ON还是WHERE里，结果都是一样的，因为INNER JOIN不会执行第三步添加外部行

SELECT * 
  FROM user_info as i
    INNER JOIN user_account as a
      ON i.userid = a.userid and i.userid = 1003;
SELECT * 
  FROM user_info as i
    INNER JOIN user_account as a
      ON i.userid = a.userid where i.userid = 1003;
返回结果都是:

+--------+------+--------+-------+
| userid | name | userid | money |
+--------+------+--------+-------+
|   1003 | z    |   1003 |     8 |
+--------+------+--------+-------+
</code></pre>
<h1 id="四-建议">四 建议</h1>
<pre><code>1.使用 join 语句，性能比强行拆成多个单表执行 SQL 语句的性能要好
2.如果使用 join 语句的话，需要让小表做驱动表。
3.给被驱动表的关联字段加上索引
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CASE WHEN用法]]></title>
        <id>https://codingheping.github.io/post/case-when-yong-fa/</id>
        <link href="https://codingheping.github.io/post/case-when-yong-fa/">
        </link>
        <updated>2020-11-10T08:56:54.000Z</updated>
        <content type="html"><![CDATA[<h1 id="mysql-的case-when-的语法">Mysql 的case when 的语法:</h1>
<p>1.简单函数</p>
<pre><code>CASE [col_name] WHEN [value1] THEN [result1]…ELSE [default] END
</code></pre>
<p>2.搜索函数</p>
<pre><code>CASE WHEN [expr] THEN [result1]…ELSE [default] END
</code></pre>
<h1 id="简单函数">简单函数</h1>
<pre><code>SELECT
	NAME '英雄',
	CASE NAME
		WHEN '德莱文' THEN
			'斧子'
		WHEN '德玛西亚-盖伦' THEN
			'大宝剑'
		WHEN '暗夜猎手-VN' THEN
			'弩'
		ELSE
			'无'
	END '装备'
FROM
	user_info;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWctYmxvZy5jc2RuLm5ldC8yMDE4MDMxOTE0MjgyMDM2NT93YXRlcm1hcmsvMi90ZXh0L0x5OWliRzluTG1OelpHNHVibVYwTDNGeFh6TXdNRE00TVRFeC9mb250LzVhNkw1TDJUL2ZvbnRzaXplLzQwMC9maWxsL0kwSkJRa0ZDTUE9PS9kaXNzb2x2ZS83MA?x-oss-process=image/format,png" alt="avatar" loading="lazy"></figure>
<h1 id="搜索函数">搜索函数</h1>
<pre><code>CASE WHEN [expr] THEN [result1]…ELSE [default] END：搜索函数可以写判断，并且搜索函数只会返回第一个符合条件的值，其他case被忽略
</code></pre>
<pre><code># when 表达式中可以使用 and 连接条件
SELECT
	NAME '英雄',
	age '年龄',
	CASE
		WHEN age &lt; 18 THEN
			'少年'
		WHEN age &lt; 30 THEN
			'青年'
		WHEN age &gt;= 30
		AND age &lt; 50 THEN
			'中年'
		ELSE
			'老年'
	END '状态'
FROM
	user_info;
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWctYmxvZy5jc2RuLm5ldC8yMDE4MDMxOTE0MjkxMDkzP3dhdGVybWFyay8yL3RleHQvTHk5aWJHOW5MbU56Wkc0dWJtVjBMM0Z4WHpNd01ETTRNVEV4L2ZvbnQvNWE2TDVMMlQvZm9udHNpemUvNDAwL2ZpbGwvSTBKQlFrRkNNQT09L2Rpc3NvbHZlLzcw?x-oss-process=image/format,png" alt="avatar" loading="lazy"></figure>
<h1 id="聚合函数-sum-配合-case-when-的简单函数实现多表-left-join-的行转列">聚合函数 sum 配合 case when 的简单函数实现多表 left join 的行转列</h1>
<p>注：曾经有个爱学习的路人问我，“那个sum()只是为了好看一点吗？”，left join会以左表为主，连接右表时，得到所有匹配的数据，再group by时只会保留一行数据，因此case when时要借助sum函数，保留其他列的和。如果你还是不明白的话，那就亲手实践一下，只保留left join看一下结果，再group by，看一下结果。例如下面的案例：学生表/课程表/成绩表 ，三个表left join查询每个学生所有科目的成绩，使每个学生及其各科成绩一行展示。</p>
<pre><code>SELECT
	st.stu_id '学号',
	st.stu_name '姓名',
	sum(
		CASE co.course_name
		WHEN '大学语文' THEN
			sc.scores
		ELSE
			0
		END
	) '大学语文',
	sum(
		CASE co.course_name
		WHEN '新视野英语' THEN
			sc.scores
		ELSE
			0
		END
	) '新视野英语',
	sum(
		CASE co.course_name
		WHEN '离散数学' THEN
			sc.scores
		ELSE
			0
		END
	) '离散数学',
	sum(
		CASE co.course_name
		WHEN '概率论与数理统计' THEN
			sc.scores
		ELSE
			0
		END
	) '概率论与数理统计',
	sum(
		CASE co.course_name
		WHEN '线性代数' THEN
			sc.scores
		ELSE
			0
		END
	) '线性代数',
	sum(
		CASE co.course_name
		WHEN '高等数学' THEN
			sc.scores
		ELSE
			0
		END
	) '高等数学'
FROM
	edu_student st
LEFT JOIN edu_score sc ON st.stu_id = sc.stu_id
LEFT JOIN edu_courses co ON co.course_no = sc.course_no
GROUP BY
	st.stu_id
ORDER BY
	NULL;

</code></pre>
<figure data-type="image" tabindex="3"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWctYmxvZy5jc2RuLm5ldC8yMDE4MDMxOTE1MDg0MTkwNT93YXRlcm1hcmsvMi90ZXh0L0x5OWliRzluTG1OelpHNHVibVYwTDNGeFh6TXdNRE00TVRFeC9mb250LzVhNkw1TDJUL2ZvbnRzaXplLzQwMC9maWxsL0kwSkJRa0ZDTUE9PS9kaXNzb2x2ZS83MA?x-oss-process=image/format,png" alt="avatar" loading="lazy"></figure>
<h2 id="测试数据">测试数据</h2>
<pre><code>-- 创建表  学生表
CREATE TABLE `edu_student` (
	`stu_id` VARCHAR (16) NOT NULL COMMENT '学号',
	`stu_name` VARCHAR (20) NOT NULL COMMENT '学生姓名',
	PRIMARY KEY (`stu_id`)
) COMMENT = '学生表' ENGINE = INNODB;

-- 课程表 
CREATE TABLE `edu_courses` (
	`course_no` VARCHAR (20) NOT NULL COMMENT '课程编号',
	`course_name` VARCHAR (100) NOT NULL COMMENT '课程名称',
	PRIMARY KEY (`course_no`)
) COMMENT = '课程表' ENGINE = INNODB;

-- 成绩表
CREATE TABLE `edu_score` (
	`stu_id` VARCHAR (16) NOT NULL COMMENT '学号',
	`course_no` VARCHAR (20) NOT NULL COMMENT '课程编号',
	`scores` FLOAT NULL DEFAULT NULL COMMENT '得分',
	PRIMARY KEY (`stu_id`, `course_no`)
) COMMENT = '成绩表' ENGINE = INNODB;

-- 插入数据

-- 学生表数据

INSERT INTO edu_student (stu_id, stu_name)
VALUES
	('1001', '盲僧'),
	('1002', '赵信'),
	('1003', '皇子'),
	('1004', '寒冰'),
	('1005', '蛮王'),
	('1006', '狐狸');

-- 课程表数据 
INSERT INTO edu_courses (course_no, course_name)
VALUES
	('C001', '大学语文'),
	('C002', '新视野英语'),
	('C003', '离散数学'),
	(
		'C004',
		'概率论与数理统计'
	),
	('C005', '线性代数'),
	('C006', '高等数学');

-- 成绩表数据
INSERT INTO edu_score (stu_id, course_no, scores)
VALUES
	('1001', 'C001', 67),	('1002', 'C001', 68),	('1003', 'C001', 69),	('1004', 'C001', 70),	('1005', 'C001', 71),
	('1006', 'C001', 72),	('1001', 'C002', 87),	('1002', 'C002', 88),	('1003', 'C002', 89),	('1004', 'C002', 90),
	('1005', 'C002', 91),	('1006', 'C002', 92),	('1001', 'C003', 83),	('1002', 'C003', 84),	('1003', 'C003', 85),
	('1004', 'C003', 86),	('1005', 'C003', 87),	('1006', 'C003', 88),	('1001', 'C004', 88),	('1002', 'C004', 89),
	('1003', 'C004', 90),	('1004', 'C004', 91),	('1005', 'C004', 92),	('1006', 'C004', 93),	('1001', 'C005', 77),
	('1002', 'C005', 78),	('1003', 'C005', 79);

</code></pre>
]]></content>
    </entry>
</feed>